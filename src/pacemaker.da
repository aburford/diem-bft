import blocktree 
import safety 
import syncmanager

bugs = None
current_round = 0 # Initially zero
last_round_tc = None # Initially ⊥
pending_timeouts = {} # Timeouts per round
timers = {}
transmission_delay_bound = 0
broadcast = None
# |Function get round timer(r)
# └ return round timer formula 
logger = None
def get_round_timer(r):
    return timers[r]

def start_timer(new_round): 
    global current_round

    stop_timer(current_round)
    current_round = new_round
    timers[new_round] = (
        # Timer duration
        4 * transmission_delay_bound,
        # Timer is not paused
        False
    )

def stop_timer(current_round):
    timers[current_round] = (
        # The duration doesn't matter, but I made it large so
        # we aren't spinning in a loop
        2 ** 10,
        # Timer is paused
        True
    )

# Procedure local timeout round()
# save consensus state()
# timeout info ← Safety.make timeout(current round, Block-Tree.high qc, last round tc)
# broadcast TimeoutMsghtimeout info, last round tc, Block-Tree.high commit qci

# TODO restart timeout timer in case timeout gets lost
def local_timeout_round():
    #save_consensus_state()
    timeout_info = safety.make_timeout(current_round, blocktree.high_qc, last_round_tc)
    if timeout_info:
        timeout_msg = blocktree.TimeoutMsg(timeout_info, last_round_tc, blocktree.high_commit_qc)
        broadcast(('timeout', timeout_msg))
        syncmanager.timeout()
        start_timer(current_round)
        logger.debug(f"[Timeout with timeout message]\n\
                      [{timeout_msg}]")

# Function process remote timeout(tmo)
# tmo info ← tmo.tmo info
# if tmo info.round < current round then
# return ⊥
# if tmo info.sender 6∈ pending timeouts[tmo info.round].senders then
# pending timeouts[tmo info.round] ← pending timeouts[tmo info.round] ∪ {tmo info}
# if |pending timeouts[tmo info.round].senders| == f + 1 then
# stop timer(current round)
# local timeout round() // Bracha timeout
# if |pending timeouts[tmo info.round].senders| == 2f + 1 then
# return TC h
# round ← tmo info.round,
# tmo high qc rounds ← {t.high qc.round | t ∈ pending timeouts[tmo info.round]},
# signatures ← {t.signature | t ∈ pending timeouts[tmo info.round]}i)
# return ⊥
def process_remote_timeout(tmo):
    tmo_info = tmo.tmo_info
    if tmo_info.round < current_round: 
        return None
    if pending_timeouts.get(tmo_info.round) == None or \
            tmo_info.sender not in pending_timeouts[tmo_info.round]:
        if tmo_info.round in pending_timeouts:
            pending_timeouts[tmo_info.round][tmo_info.sender] = tmo_info
        else:
            pending_timeouts[tmo_info.round] = {tmo_info.sender: tmo_info}
    #if len(pending_timeouts[tmo_info.round]) == f + 1: 
    #    logger.debug('bracha timeout for round %d after receiving tmo %s' % (tmo_info.round, tmo))
    #    stop_timer(current_round)
    #    local_timeout_round()  #Bracha timeout
    #    pass
    qsize = 2 * f if 'small_quorum' in bugs else 2 * f + 1
    if len(pending_timeouts[tmo_info.round]) == qsize:
        round = tmo_info.round
        # tmo high qc rounds ← {t.high qc.round | t ∈ pending timeouts[tmo info.round]}
        tmo_high_qc_rounds = set()
        for sender in pending_timeouts[tmo_info.round]:
            t = pending_timeouts[tmo_info.round][sender]
            if t.high_qc == None:
                tmo_high_qc_rounds.add(-1)
            else:
                tmo_high_qc_rounds.add(t.high_qc.vote_info.round)
        # signatures ← {t.signature | t ∈ pending timeouts[tmo info.round]})
        signatures = {(sender, pending_timeouts[tmo_info.round][sender].signature) for sender in pending_timeouts[tmo_info.round]}
        timeout_certificate = blocktree.TC(round, tmo_high_qc_rounds, signatures)
        return timeout_certificate
    return None

# Function advance round tc(tc)
# if tc = ⊥ ∨ tc.round < current round then
# return false
# last round tc ← tc
# start timer(tc.round + 1)
# return true
def advance_round_tc(tc):
    global current_round
    global last_round_tc
    if tc == None or  tc.round < current_round: 
        return False
    last_round_tc = tc
    start_timer(tc.round + 1)
    logger.debug(f"[advances round {current_round} using TC]")
    return True

# Function advance round qc(qc)
# if qc.vote info.round < current round then
# return false
# last round tc ← ⊥
# start timer(qc.vote info.round + 1)
# return true
def advance_round_qc(qc_round):
    global current_round

    if qc_round < current_round:
        return False
    last_round_tc = None
    start_timer(qc_round + 1)
    logger.debug(f"[advances round {current_round} using QC]")
    return True
