from uuid import uuid4
import random
import safety

class Client(process):
	def setup(replicas:set, runner, num_requests, public_keys, private_key, id, seed):
		output('configured to send %d requests' % num_requests)
		safety.public_keys = public_keys
		safety.private_key = private_key
		random.seed(seed)
	
	# __str__ doesn't seem to work with DistAlgo...
	def to_str():
		return 'client' + str(id)
	
	def run():
		# TODO:
		# 1. client requests should be signed
		#		replicas verify signatures
		# 2. include unique id to avoid request duplication
		# 3. client should be able to determine when a submitted request
		#		has been submitted to the ledger
		output('started running')
		# send requests
		duration = 1
		for i in range(num_requests):
			# TODO include signature
			uuid = '%xu' % random.getrandbits(16*8)
			command = to_str() + str(i)
			author = to_str()
			txn = (command, author, uuid)
			send(('request', txn), to=replicas)
			committed = False
			while not committed:
				if await(some(received(('committed', _txn, commit_state_id)))):
					# TODO check commit_state_id signature
					committed = True
				elif timeout(duration):
					output('timed out requesting commit for txn:', txn)
					duration *= 2
			duration /= 2
		output('done sending commands')
		send(('done',), to=runner)
	
