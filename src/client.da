import pickle
from uuid import uuid4
from time import sleep
import random
import safety
from config import *
import logging

class Client(process):
    def setup(replicas:set, runner, workload, public_keys, private_key, id, seed, num_faulty, testcase_name):
        logging.basicConfig(filename = f"log/{testcase_name}_{to_str()}.log",level=logging.INFO,
                format='[%(asctime)s] - ' + '[' + to_str() + '] - ' + '%(message)s',filemode='w')
        output('configured with %s workload for %d requests' % (workload.type.name, workload.count))
        logging.info('configured with %s workload for %d requests' % (workload.type.name, workload.count))
        safety.public_keys = public_keys
        safety.private_key = private_key
        random.seed(seed)
    
    # __str__ doesn't seem to work with DistAlgo...
    def to_str():
        return 'client' + str(id)
    
    def send_request(i, uuid):
        # TODO include signature
        signature = safety.sign_u(i)
        command = to_str() + '-' + str(i) # client0 -> server .... server calls safety.verify_u("client0", signuature)
        author = to_str()
        txn = (command, author, uuid)
        send(('request', txn, signature), to=replicas)
        return txn
    
    def run():
        # TODO:
        # 1. client requests should be signed
        #       replicas verify signatures
        # 2. include unique id to avoid request duplication
        # 3. client should be able to determine when a submitted request
        #       has been submitted to the ledger

        output('started running')
        logging.info('[start running]')
        if workload.type == WorkloadType.retransmit:
            # send requests
            duration = 1
            for i in range(workload.count):
                committed = False
                uuid = '%xu' % random.getrandbits(16*8)
                while not committed:
                    txn = send_request(i, uuid)
                    if await(len(setof(sender, received(('committed', _txn, commit_state_id), from_=sender))) > num_faulty):
                        # TODO check commit_state_id signature
                        committed = True
                    elif timeout(duration):
                        output('timed out requesting commit for txn:', txn)
                        logging.info(f'[timed out requesting commit for transaction]:{txn}')
                        duration *= 2
                duration /= 2
        elif workload.type == WorkloadType.flood:
            for i in range(workload.count):
                uuid = '%xu' % random.getrandbits(16*8)
                send_request(i, uuid)
            if await(each(sent(('request', txn, _)), has=len(setof(sender, received(('committed', _txn, _), from_=sender))) > num_faulty)):
                output('all txns committed:')
                output(setof(txn, sent(('request', txn, _))))
                logging.info('[all transacations commmited]')
            elif timeout(workload.timeout):
                output('failed to commit all transactions after %d seconds' % workload.timeout)
                logging.info(f'[failed to commit all transactions after {workload.timeout} seconds]')
        elif workload.type == WorkloadType.timed:
            assert workload.count - 1 == len(workload.delays)
            workload.delays.append(0)
            for i in range(workload.count):
                uuid = '%xu' % random.getrandbits(16*8)
                send_request(i, uuid)
                sleep(workload.delays[i])
            if await(each(sent(('request', txn, _)), has=len(setof(sender, received(('committed', _txn), from_=sender))) > num_faulty)):
                output('all txns committed')
                logging.info("[all transactions committed]")
            elif timeout(workload.timeout):
                output('failed to commit all transactions after %d seconds' % workload.timeout)
                logging.info(f'[failed to commit all transactions after {workload.timeout} seconds]')
        output('done sending commands')
        logging.info("[done sending commands]")
        send(('done',), to=runner)
