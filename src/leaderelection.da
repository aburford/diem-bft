import pacemaker 
import ledger
import math
import random

validators = [] # The list of current validators, assigned by replica
window_size = 5 # A parameter for the leader reputation algorithm
exclude_size = 10 # Between f and 2f, number of excluded authors of last committed blocks
reputation_leaders = {} # Map from round numbers to leaders elected due to the reputation scheme

# Function elect reputation leader(qc)
# | active validators ← ∅ // validators that signed the last window size committed blocks
# | last authors ← ∅ // ordered set of authors of last exclude size committed blocks
# | current qc ← qc
# | for i = 0; i < window size ∨ |last authors| < exclude size; i ← i + 1 do
# | | current block ← Ledger.committed block(current qc.vote info.parent id)
# | | block author ← current block.author
# | | if i < window size then
# | | └active validators ← active validators ∪ current qc.signatures.signers()
# | | if |last authors| < exclude size then
# | | └last authors ← last authors ∪ {block author}
# | └current qc ← current block.qc
# | active validators ← active validators \ last authors // contains at least 1 validator
# └ return active validators.pick one(seed ← qc.voteinfo.round)
def elect_reputation_leader(qc):
    active_validators = {} # validators that signed the last window size committed blocks
    last_authors = {} # ordered set of authors of last exclude size committed blocks
    current_qc = qc
    i = 0
    while i < window_size or len(last_authors) < exclude_size:
        current_block = ledger.committed_block(current_qc.vote_info.parent_id)
        block_author = current_block.author
        if i < window_size:
            active_validators = active_validators.union(current_qc.signatures.signers())
        # |current qc.signatures.signers()| ≥ 2f + 1
        if len(last_authors) < exclude_size:
            last_authors = last_authors.union(block_author)
        current_qc = current_block.qc
        i = i + 1
    active_validators = active_validators.difference(last_authors) # contains at least 1 validator
    random.seed(qc.voteinfo.round)
    return random.choice(active_validators)  #active_validators.pick_one(seed = qc.voteinfo.round)

# Procedure update leaders(qc)
# | extended round ← qc.vote info.parent round
# | qc round ← qc.vote info.round
# | current round ← PaceMaker.current round
# | if extended round + 1 = qc round ∧ qc round + 1 = current round then
# | └reputation leaders[current round + 1] ← elect reputation leader(qc) 
# └
def update_leaders(qc):
    extended_round = qc.vote_info.parent_round
    qc_round = qc.vote_info.round
    current_round = pacemaker.current_round
    if extended_round + 1 == qc_round and qc_round + 1 == current_round:
        reputation_leaders[current_round + 1] = elect_reputation_leader(qc)

# Function get leader(round)
# | if (round, leader) ∈ reputation leaders then
# |  └return leader // Reputation-based leader
# └ return validators[round/2 mod |validators|]
def get_leader(round):
    leader = reputation_leaders.get(round)
    if leader != None:
        return leader # Reputation-based leader
    return validators[math.floor(round/2) % len(validators)] 



#print(pacemaker.get_round_timer(32))