from collections import OrderedDict
requests = OrderedDict()
# maximum number of transactions to include in a block
BLOCK_SIZE = 4
SIZE = 100
# set by replica
id_to_server = None
multicast = None

# first idea (wrong):
# pending set() keeps track of pending requests
# when proposal received, remove proposed txns from pending and add to proposed
#   ignore proposal if contains requests already proposed or committed
#   move proposed to committed
# when receive request, ignore if already in pending or proposed. reply if in committed. else add to pending
# i'm pretty sure we could use the same dictionary for proposed and committed but it would be less efficient
#   trade off between quickly searching for round vs searching for previously committed block

# second idea:
# diem mempool implementation in rust: "Mempool doesn't keep track of transactions sent to consensus. On each get_block request (to pull a block of transaction from mempool), consensus sends a set of transactions that were pulled from mempool, but not committed. This allows the mempool to stay agnostic about different consensus proposal branches."
# so instead of keeping track of proposed txns ourselves, take that as parameter in get_transactions
# don't remove from pending until we have committed or rejected block

def check_transaction(txn, client):
    uuid = txn[2]
    # Check whether transaction has already been committed
    if uuid in requests and requests[uuid][1] != None:
        # Move it to the front
        requests.move_to_end(uuid, last=False)
        return requests[uuid][1]
    if len(requests) == SIZE:
        requests.popitem()
    requests[uuid] = (txn, None)
    return False

def get_transactions(exclude_payloads):
    exclude_uuids = set()
    exclude_txns = [txn for payload in exclude_payloads for txn in payload]
    for (_, _, uuid) in exclude_txns:
        exclude_uuids.add(uuid)
    payload = [requests[uuid][0] for uuid in requests
        if (uuid not in exclude_uuids and requests[uuid][1] == None)
    ]
    return payload[:BLOCK_SIZE]

def commit_transactions(txns, commit_state_id):
    #print('committing txns:', txns)
    for (command, author, uuid) in txns:
        requests.move_to_end(uuid, last=False)
        requests[uuid] = ((command, author, uuid), commit_state_id)
        client = id_to_server[author]
        multicast(('committed', (command, author, uuid), commit_state_id), to=client)
        if len(requests) == SIZE:
            requests.popitem()
