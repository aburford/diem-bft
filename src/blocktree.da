import ledger
import nacl.hash
import pickle
import safety

HASHER = nacl.hash.sha256
def hash(*payloads):
    payloads_bytes = pickle.dumps(payloads)
    return HASHER(payloads_bytes) # sign the input in bytes with private key.

class PendingBlock:
    def __init__(self, block):
        self.block = block
        self.children = []

class PendingBlockTree:
    def __init__(self):
        ledger.pending_block_tree = self
        self.id_to_block = {}

    def add(self, block):
        pending_block = PendingBlock(block)
        self.id_to_block[block.id] = pending_block
        if block.qc != None and \
                block.qc.vote_info.id in self.id_to_block:
            self.id_to_block[block.qc.vote_info.id].children.append(pending_block)

    def dfs(self, new_tree, pending_block):
        new_tree[pending_block.block.id] = pending_block
        for child in pending_block.children:
            self.dfs(new_tree, child)

    def prune(self, block_id):
        if block_id in self.id_to_block:
            new_tree = {}
            self.dfs(new_tree, self.id_to_block[block_id])
            self.id_to_block = new_tree

u = None
# pending_block_tree; // tree of blocks pending commitment
pending_block_tree = PendingBlockTree()
# pending_votes; // collected votes per block indexed by their LedgerInfo hash
pending_votes = {}
# highest known QC
high_qc = None
# highest QC that serves as a commit certificate
high_commit_qc = None

# VoteInfo
# │ id, round; // Id and round of block
# │ parent_id, parent round; // Id and round of parent
# └ exec_state id; // Speculated execution state
class VoteInfo:
    def __init__(self, block_id, vote_round, parent_id, parent_round, exec_state_id):
        self.id = block_id
        self.round = vote_round
        self.parent_id = parent_id
        self.parent_round = parent_round
        self.exec_state_id = exec_state_id

    # def __repr__(self):
    #     return f"\n\
    #     id: {self.id} \n\
    #     round: {self.round} \n\
    #     parent_id: {self.parent_id} \n\
    #     parent_round: {self.parent_round} \n\
    #     exec_state_id: {self.exec_state_id} "
# // speculated new committed state to vote directly on
# LedgerCommitInfo
# │ commit_state_id; // ⊥ if no commit happens when this vote is aggregated to QC
# └ vote_info_hash; // Hash of VoteMsg.vote info
class LedgerCommitInfo:
    def __init__(self, commit_state_id, vote_info):
        self.commit_state_id = commit_state_id
        self.vote_info_hash = hash(
            vote_info.id,
            vote_info.round,
            vote_info.parent_id,
            vote_info.parent_round,
            vote_info.exec_state_id,
        )
    # def __repr__(self):
    #     return f"commit_state_id: {self.commit_state_id} \n\
    #             vote_info_hash: {self.vote_info_hash}"

# │ vote_info; // A VoteInfo record
# │ ledger_commit_info; // Speculated ledger info
# │ high_commit_qc; // QC to synchronize on committed blocks
# │ sender ← u; // Added automatically when constructed
# └ signature ← signu(ledger commit info); // Signed automatically when constructed
class VoteMsg:
    def __init__(self, vote_info, ledger_commit_info, high_commit_qc):
        self.vote_info = vote_info
        self.ledger_commit_info = ledger_commit_info
        self.high_commit_qc = high_commit_qc
        self.sender = u
        self.signature = safety.sign_u(ledger_commit_info)

    # def __repr__(self):
    #     return f"vote_info: {self.vote_info} \n\
    #             ledger_commit_info: {self.ledger_commit_info} \n\
    #             high_commit_qc: {self.high_commit_qc} \n\
    #             sender: {self.sender} \n\
    #             signature: {self.signature}"

# // QC is a VoteMsg with multiple signatures
# QC
# │ vote_info;
# │ ledger_commit_info;
# │ signatures; // A quorum of signatures
# │ author ← u; // The validator that produced the qc
# └ author_signature ← signu(signatures);
class QC:
    def __init__(self, vote_info, ledger_commit_info, signatures):
        self.vote_info = vote_info
        self.ledger_commit_info = ledger_commit_info
        self.signatures = signatures
        self.author = u
        self.author_signature = safety.sign_u(signatures)

    # def __repr__(self):
    #     return f"vote_info: {self.vote_info} \n\
    #             ledger_commit_info: {self.ledger_commit_info} \n\
    #             signatures: {self.signatures} \n\
    #             author: {self.author} \n\
    #             author_signature: {self.author_signature}"
# Block
# │ author; // The author of the block, may not be the same as qc.author after view-change
# │ round; // The round that generated this proposal
# │ payload ; // Proposed transaction(s)
# │ qc ; // QC for parent block
# └ id; // A unique digest of author, round, payload, qc.vote_info.id and qc.signatures
class Block:
    def __init__(self, author, block_round, payload, qc):
        self.author = author
        self.round = block_round
        self.payload = payload
        self.qc = qc
        # TODO: add author, qc.vote_info.id, and qc.signatures
        self.id = hash(block_round, payload)

    # def __repr__(self):
    #     return f"\n\
    # \tauthor: {self.author} \n\
    # \tround: {self.round} \n\
    # \tpayload: {self.payload} \n\
    # \tqc: {self.qc} \n\
    # \tid: {self.id}\n\
    # "

# TimeoutInfo
# │ round;
# │ high_qc;
# │ sender ← u; // Added automatically when constructed
# └ signature ← signu (round, high qc.round); // Signed automatically when constructed
class TimeoutInfo:
    def __init__(self, round, high_qc):
        self.round = round
        self.high_qc = high_qc
        self.sender = u 
        if high_qc == None:
            self.signature = safety.sign_u(round)
        else:
            self.signature = safety.sign_u(round, high_qc.vote_info.round)
        
    # def __repr__(self):
    #     return f"round: {self.round} \n\
    #             high_qc: {self.high_qc} \n\
    #             sender: {self.sender} \n\
    #             signature: {self.signature}"
# TC
# │ round; // All timeout messages that form TC have the same round
# │ tmo_high_qc_rounds; // A vector of 2f + 1 high qc round numbers of timeout messages that form TC
# └ tmo_signatures; // A vector of 2f + 1 validator signatures on (round, respective high qc round)
class TC:
    def __init__(self, round, tmo_high_qc_rounds, tmo_signatures):
        self.round = round
        self.tmo_high_qc_rounds = tmo_high_qc_rounds
        self.tmo_signatures = tmo_signatures

    # def __repr__(self):
    #     return f"round: {self.round} \n\
    #             tmo_high_qc_rounds: {self.tmo_high_qc_rounds} \n\
    #             tmo_signatures: {self.tmo_signatures}"

# TimeoutMsg
# │ tmo_info; // TimeoutInfo for some round with a high qc
# │ last_round_tc; // TC for tmo_info.round − 1 if tmo_info.high_qc.round ̸= tmo_info.round − 1, else ⊥
# └ high_commit_qc; // QC to synchronize on committed blocks
class TimeoutMsg:
    def __init__(self, tmo_info, last_round_tc, high_commit_qc):
        self.tmo_info = tmo_info
        self.last_round_tc = last_round_tc
        self.high_commit_qc = high_commit_qc

    # def __repr__(self):
    #     return f"tmo_info: {self.tmo_info} \n\
    #             last_round_tc: {self.last_round_tc} \n\
    #             high_commit_qc: {self.high_commit_qc}"

# ProposalMsg
# │ block;
# │ last_round_tc; // TC for block.round − 1 if block.qc.vote_info.round ̸= block.round − 1, else ⊥
# │ high_commit_qc; // QC to synchronize on committed blocks
# └ signature ← signu(block.id);
class ProposalMsg:
    def __init__(self, block, last_round_tc, high_commit_qc):
        self.block = block
        self.last_round_tc = last_round_tc
        self.high_commit_qc = high_commit_qc
        self.signature = safety.sign_u(block.id)
    # def __repr__(self):
    #     return f"\n\
    # block: {{{self.block}}} \n\
    # last_round_tc: {self.last_round_tc} \n\
    # high_commit_qc: {self.high_commit_qc} \n\
    # signature: {self.signature} "

# QC with the highest round
def max_qc(qc1, qc2):
    if qc1 == None:
        return qc2
    if qc2 == None:
        return qc1
    if qc1.vote_info.round > qc2.vote_info.round:
        return qc1
    else:
        return qc2

# Procedure process_qc(qc)
# │ if qc.ledger_commit_info.commit_state id != ⊥ then
# │ │ Ledger.commit(qc.vote_info.parent_id) 
# │ │ pending_block_tree.prune(qc.vote_info.parent_id) // parent id becomes
# │ │   the new root of pending
# │ └ high_commit_qc ← max{round}(qc, high_commit_qc)
# └ high qc ← max{round}(qc, high_qc)
def process_qc(qc):
    global high_commit_qc
    global high_qc

    if qc != None and \
            qc.ledger_commit_info.commit_state_id != None:
        ledger.commit(qc.vote_info.parent_id)
        pending_block_tree.prune(qc.vote_info.parent_id)
        old_high_commit_qc = high_commit_qc
        high_commit_qc = max_qc(qc, high_commit_qc)
        high_qc = max_qc(qc, high_qc)
        block = ledger.committed_block(qc.vote_info.parent_id)
        if block == None:
            payload = None
        else:
            payload = block.payload
        return payload, qc.ledger_commit_info.commit_state_id
    high_qc = max_qc(qc, high_qc)
    return (None, None)

# Procedure execute_and_insert(b)
# │ Ledger.speculate(b.qc.block_id, b.id, b.payload)
# └ pending_block_tree.add(b)
def execute_and_insert(b):
    if b.qc == None:
        ledger.speculate(None, b.id, b.payload)
    else:
        ledger.speculate(b.qc.vote_info.id, b.id, b.payload)
    pending_block_tree.add(b)

# Function process_vote(v)
# │ process_qc(v.high_commit_qc)
# │ vote_idx ← hash(v.ledger_commit_info)
# │ pending_votes[vote_idx] ← pending_votes[vote_idx] U ∪v.signature
# │ if |pending_votes[vote_idx]|= 2f + 1 then
# │ │ qc ← QC <
# │ │ │ vote_info ← v.vote_info,
# │ │ │ state_id ← v.state_id,
# │ │ └ votes ← pending_votes[vote_idx] >
# │ └ return qc
# └ return ⊥
def process_vote(v):
    process_qc(v.high_commit_qc)
    vote_idx = hash(
        v.ledger_commit_info.commit_state_id,
        v.ledger_commit_info.vote_info_hash
    )
    if not(vote_idx in pending_votes):
        pending_votes[vote_idx] = set()
    pending_votes[vote_idx].add((v.sender, v.signature))
    if len(pending_votes[vote_idx]) == 2 * f + 1:
        return QC(
            v.vote_info,
            v.ledger_commit_info,
            pending_votes[vote_idx]
        )
    else:
        return None

# Function generate_block(txns,current_round)
# │ return Block <
# │ │ author ← u,
# │ │ round ← current_round,
# │ │ payload ← txns,
# │ │ qc ← high_qc,
# └ └ id ← hash(author || round || payload || qc.vote_info.id || qc.signatures) >
def generate_block(txns, current_round):
    return Block(
        u,
        current_round,
        txns,
        high_qc,
    )

# TODO return list of blocks from high_commit_qc (exclusive) to high_qc (inclusive)
#  (i think...)
def path_from_commit_root():
    path = []
    qc = high_qc
    if high_commit_qc == None:
        high_commit_qc_parent_id = None
    else:
        high_commit_qc_parent_id = high_commit_qc.vote_info.parent_id
    while qc != None and qc.vote_info.id != high_commit_qc_parent_id:
        block = pending_block_tree.id_to_block[qc.vote_info.id].block
        path.append(block)
        qc = block.qc
    return path
