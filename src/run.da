from replica import Replica
from client import Client
import leaderelection

class Run(process):
	def setup(config):
		self.num_replicas = config['num_replicas']
		self.num_faulty = config['num_faulty']
		self.num_clients = config['num_clients']
		self.num_requests = config['num_requests']
		self.transmission_delay_bound = config['transmission_delay_bound']

	def run():
		output('Starting run with %d replicas, %d faulty replicas, and %d clients' % (num_replicas, num_faulty, num_clients))
		replicas = new(Replica, num=num_replicas)
		clients = new(Client, num=num_clients)
		setup(replicas, (replicas, clients, transmission_delay_bound))
		for c, n in zip(clients, num_requests):
			setup(c, (replicas, self, n))
		start(replicas | clients)
		await(each(c in clients, has=received(('done',), from_=c)))
		output('All clients finished sending requests')
		send(('done',), to=replicas)

def main():
	configs = []
	configs.append({
		'num_replicas': 5,
		'num_faulty': 0,
		'num_clients': 1,
		'num_requests': [5],
		'transmission_delay_bound': 1
	})
	for config in configs:
		r = new(Run, (config,))
		start(r)
