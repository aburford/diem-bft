from replica import Replica
from replicafi import ReplicaFI
from client import Client
import leaderelection
import random
from nacl.signing import SigningKey
import sys
from config import *

class Run(process):
    def setup(config, failure_config):
        self.num_replicas = config.num_replicas
        self.num_faulty = config.num_faulty
        self.workloads = config.workloads
        self.transmission_delay_bound = config.transmission_delay_bound
        if config.seed == None:
            self.seed = random.randomint(0, sys.maxsize)
        else:
            self.seed = config.seed
        self.failure_config = failure_config
        output('using random seed: %d' % self.seed)

    def run():
        num_clients = sum([wkld.num_clients for wkld in self.workloads])
        output(
            'Starting run with %d replicas, %d faulty replicas, and %d clients' % \
            (num_replicas, num_faulty, num_clients)
        )
        replicas = list(new(ReplicaFI, num=num_replicas))
        clients = list(new(Client, num=num_clients))
        random.seed(seed)
        private_keys = {
            'replica' + str(i): SigningKey(random.getrandbits(256).to_bytes(32, 'big'))
            for i in range(num_replicas)
        }
        private_keys.update({
            'client' + str(i): SigningKey(random.getrandbits(256).to_bytes(32, 'big'))
            for i in range(num_clients)
        })
        public_keys = {
            'replica' + str(i): private_keys['replica' + str(i)].verify_key
            for i in range(num_replicas)
        }
        public_keys.update({
            'client' + str(i): private_keys['client' + str(i)].verify_key
            for i in range(num_clients)}
        )
        replica_ids = {'replica' + str(i) for i in range(num_replicas)}
        client_ids = {'client' + str(i) for i in range(num_clients)}
        server_ids = {replica: 'replica' + str(i) for i, replica in enumerate(replicas)}
        server_ids.update({client: 'client' + str(i) for i, client in enumerate(clients)})

        # we use str(replica) to get unique replica id's
        # but these are not reproducible
        # so override __str__ to return unique index
        # jk distalgo doesn't allow that, use to_str()
        for i, replica in enumerate(replicas):
            output('setting up replicafi', replica)
            setup(
                replica, (
                    failure_config,
                    replica_ids,
                    client_ids,
                    replicas,
                    clients,
                    transmission_delay_bound,
                    public_keys,
                    private_keys['replica' + str(i)],
                    i,
                    random.random(),
                    server_ids,
                    num_faulty
                )
            )
        for i, (client, workload) in enumerate(zip(clients, workloads)):
            setup(client, (
                replicas,
                self,
                workload,
                public_keys,
                private_keys['client' + str(i)],
                i,
                random.random()
            ))
        start(replicas + clients)
        await(each(c in clients, has=received(('done',), from_=c)))
        output('All clients finished sending requests')
        send(('done',), to=replicas)


def main():
    configs = [
        Config(
            num_replicas = 5,
            num_faulty = 0,
            workloads = [
                Workload(
                    type = WorkloadType.retransmit,
                    count = 5,
                    num_clients = 1
                )
            ],
            transmission_delay_bound = 1,
            seed = 0
        )
    ]
    failure_configs = [
        FailureConfig(
            failures = [
                #Failure(
                #    src = '_',
                #    dest = 'leader',
                #    msg_type = MsgType.Proposal,
                #    round = 0,
                #    prob = 1,
                #    fail_type = FailType.MsgLoss
                #)
            ],
            seed = 0
        )
    ]
    for config, failure_config in zip(configs, failure_configs):
        r = new(Run, (config, failure_config))
        start(r)
