import nacl.encoding
import nacl.hash
import ledger 
import blocktree 
from nacl.signing import SigningKey
import replica
import pickle
import logging

u = None # a str representing replica id
private_key = None
public_keys = {} # Public keys of all validators, a dictionary.
highest_vote_round = -1 # initially 0
highest_qc_round = -2
# ----- private functions---------
# Procedure increase highest vote round(round)
# | commit not to vote in rounds lower than round
# └ highest vote round ← max{round, highest vote round}
def __increase_highest_vote_round(round):
    global highest_vote_round
    highest_vote_round = max(round, highest_vote_round)

# Procedure update highest qc round(qc round)
# └highest qc round ← max{qc round, highest qc round}
def __update_highest_qc_round(qc_round):
    global highest_qc_round
    highest_qc_round = max(qc_round, highest_qc_round)

# Function consecutive(block round, round)
# └return round + 1 = block round
def __consecutive(block_round, round):
    return round + 1 == block_round

# Function safe to extend(block round, qc round, tc)
# └return consecutive(block round, tc.round) ∧ qc round ≥ max{tc.tmo high qc rounds}
def __safe_to_extend(block_round, qc_round, tc):
    return __consecutive(block_round, tc.round) and (tc == None or qc_round >= max(tc.tmo_high_qc_rounds))

# Function safe to vote(block round, qc round, tc)
# | if block round ≤ max{highest vote round, qc round} then
# | └return false
# └return consecutive(block round, qc round) ∨ safe to extend(block round, qc round, tc)
def __safe_to_vote(block_round, qc_round, tc):
    if block_round <= max(highest_vote_round, qc_round):
        return False
    return __consecutive(block_round, qc_round) or __safe_to_extend(block_round, qc_round, tc)

# Function safe to timeout(round, qc round, tc)
# | if qc round < highest qc round ∨ round ≤ max{highest vote round − 1, qc round} then
# | └return false
# └return consecutive(round, qc round) ∨ consecutive(round, tc.round)
def __safe_to_timeout(round, qc_round, tc):
    if qc_round < highest_qc_round or round <= max(highest_vote_round - 1, qc_round):
        return False
    return __consecutive(round, qc_round) or __consecutive(
        round,
        -1 if tc == None else tc.round
    )

# Function commit state id candidate(block round, qc)
# | if consecutive(block round, qc.vote info.round) then
# | | return Ledger.pending state(qc.id)
# | else
# └return ⊥
def __commit_state_id_candidate(block_round, qc):
    if qc != None:
        if __consecutive(block_round, qc.vote_info.round):
            return ledger.pending_state(qc.vote_info.id)
    return None

# TODO can this block be created by other satefy modules ??
def __valid_signatures(qc, last_tc):
    if qc != None:
        try:
            for (author, signature) in qc.signatures:
                public_keys[author].verify(signature)
        except:
            return False
    if last_tc != None:
        try:
            for (author, signature) in last_tc.tmo_signatures:
                public_keys[author].verify(signature)
        except:
            return False
    return True
        
#------------- public functions ------------------

def sign_u(*payloads):
    payloads_bytes = pickle.dumps(payloads)
    return private_key.sign(payloads_bytes) # sign the input in bytes with private key.


def verify_client(author, signature):
    try:
        public_keys[author].verify(signature)
    except:
        return False
    return True

# Function make vote(b, last tc)
# | qc round ← b.qc.vote info.round
# | if valid signatures(b, last tc) ∧ safe to vote(b.round, qc round, last tc) then
# | | update highest qc round(qc round) // Protect qc round
# | | increase highest vote round(b.round) // Don’t vote again in this (or lower) round
# | | vote info ← VoteInfo(
# | | | (id, round) ← (b.id, b.round),
# | | | (parent id, parent round) ← (b.qc.vote info.id, qc round)
# | | └ exec state id ← Ledger.pending state(b.id))
# | | ledger commit info ←LedgerCommitInfo(
# | | | commit state id ← commit state id candidate(b.round, b.qc),
# | | └ vote info hash ← hash(vote info))
# | └ return VoteMsg(vote info, ledger commit info, Block-Tree.high commit qc)
# └ return ⊥
def make_vote(b, last_tc):
    if b.qc == None:
        qc_round = -1
    else:
        qc_round = b.qc.vote_info.round
    if __valid_signatures(b.qc, last_tc) and __safe_to_vote(b.round, qc_round, last_tc):
        __update_highest_qc_round(qc_round) # Protect qc round
        __increase_highest_vote_round(b.round) # Don’t vote again in this (or lower) round
        if b.qc == None:
            parent_id = None
        else:
            parent_id = b.qc.vote_info.id
        # VoteInfo carries the potential QC info with ids and rounds of the parent QC
        vote_info = blocktree.VoteInfo(
            block_id = b.id,
            vote_round = b.round,
            parent_id = parent_id,
            parent_round = qc_round,
            exec_state_id = ledger.pending_state(b.id)
        )
        ledger_commit_info = blocktree.LedgerCommitInfo(
            commit_state_id = __commit_state_id_candidate(b.round, b.qc),
            vote_info = vote_info
        )
        vote_msg = blocktree.VoteMsg(vote_info, ledger_commit_info, blocktree.high_commit_qc)
        logging.info(f"[made a vote message] \n\
        content = [vote_info = {vote_info} \n\
        ledger_commit_info = {ledger_commit_info}\n\
        high_commit_qc = {blocktree.high_commit_qc}]")

        return vote_msg
    return None

# Function make timeout(round, high qc, last tc)
# | qc round ← high qc.vote info.round;
# | if valid signatures(high qc, last tc) ∧ safe to timeout(round, qc round, last tc) then
# | | increase highest vote round(round) // Stop voting for round
# | └ return TimeoutInfo(round, high qc)
# └ return ⊥
def make_timeout(round, high_qc, last_tc):
    if high_qc == None:
        qc_round = -1
    else:
        qc_round = high_qc.vote_info.round
    if __valid_signatures(high_qc, last_tc) and __safe_to_timeout(round, qc_round, last_tc):
        __increase_highest_vote_round(round) # Stop voting for round
        timeout_info = blocktree.TimeoutInfo(round, high_qc)
        logging.info(f"[made a timeout info] \n\
        content = [round = {round} \n\
        high_qc = {high_qc}]")
        return timeout_info
    return None
