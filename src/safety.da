import nacl.encoding
import nacl.hash
from ledger import *
from blocktree import *

private_key = 0# Own private key
public_keys = [] # Public keys of all validators
highest_vote_round = 0 # initially 0
highest_qc_round = 0
# ----- private functions---------
def __increase_highest_vote_round(round):
    #commit not to vote in rounds lower than round
    highest_vote_round = max(round, highest_vote_round)
def __update_highest_qc_round(qc_round):
    highest_qc_round = max(qc_round, highest_qc_round)
def __consecutive(block_round, round):
    return round + 1 == block_round
def __safe_to_extend(block_round, qc_round, tc):
    return __consecutive(block_round, tc.round) and qc_round >= max(tc.tmo_high_qc_rounds)
def __safe_to_vote(block_round, qc_round, tc):
    if block_round <= max(highest_vote_round, qc_round):
        # 1. must vote in monotonically increasing rounds
        # 2. must extend a smaller round
        return False
# Extending qc from previous round or safe to extend due to tc
    return __consecutive(block_round, qc_round) or __safe_to_extend(block_round, qc_round, tc)
def __safe_to_timeout(round, qc_round, tc):
    if qc_round < highest_qc_round or round <= max(highest_vote_round - 1, qc_round):
# respect highest qc round and don’t timeout in a past round
        return False
# qc or tc must allow entering the round to timeout
    return __consecutive(round, qc_round) or __consecutive(round, tc.round)
def __commit_state_id_candidate(block_round, qc):
# find the committed id in case a qc is formed in the vote round
    if __consecutive(block_round, qc.vote_info.round):
        return pending_state(qc.id)
    else:
        return None

def __valid_signatures(b,last_tc):
    pass

#------------- public functions ------------------
def make_vote(b, last_tc):
    qc_round = b.qc.vote_info.round
    if __valid_signatures(b, last_tc) and __safe_to_vote(b.round, qc_round, last_tc):
        __update_highest_qc_round(qc_round) # Protect qc round
        __increase_highest_vote_round(b.round) # Don’t vote again in this (or lower) round
        # VoteInfo carries the potential QC info with ids and rounds of the parent QC
        vote_info = VoteInfo(
                        id = b.id,
                        round = b.round,
                        parent_id = b.qc.vote_info.id,
                        parent_round= qc_round, # no comma in paper...
                        exec_state_id = pending_state(b.id)
                    )
        ledger_commit_info  = LedgerCommitInfo(
                            commit_state_id = __commit_state_id_candidate(b.round, b.qc),
                            vote_info_hash = nacl.hash.sha256(vote_info)) # sha256 hash here
        return VoteMsg(vote_info, ledger_commit_info, high_commit_qc)
    return None

def make_timeout(round, high_qc, last_tc):
    qc_round = high_qc.vote_info.round
    if __valid_signatures(high_qc, last_tc) and __safe_to_timeout(round, qc_round, last_tc):
        __increase_highest_vote_round(round) # Stop voting for round
        return TimeoutInfo(round, high_qc)
    return None
