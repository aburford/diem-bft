from replica import Replica
import pacemaker
import leaderelectiontestexec as leaderelection
import random
import safety
from config import *
from time import sleep
import mempool

class ReplicaTestExec(process, Replica):
    def setup(
        executor,
        replica_ids,
        transmission_delay_bound,
        public_keys,
        private_key,
        ident,
        seed,
        num_faulty,
        leaders,
        nrounds,
        testcase_name,
        dirname
    ):
        super().setup(
            executor,
            replica_ids,
            transmission_delay_bound,
            public_keys,
            private_key,
            ident,
            seed,
            num_faulty,
            testcase_name,
            dirname
        )
        personal_seed = random.random()
        random.seed(seed)
        txns = []
        alphabet = [chr(x) for x in range(ord('a'), ord('z') + 1)]
        for _ in range(nrounds * mempool.BLOCK_SIZE * 2):
            txn = [random.choice(alphabet) for _ in range(6)]
            uuid = '%xu' % random.getrandbits(16*8)
            txns.append((uuid, ''.join(txn)))
        random.seed(personal_seed)
        random.shuffle(txns)
        for uuid, txn in txns:
            mempool.requests[uuid] = ((txn, 'client0', uuid), None)
        leaderelection.reputation_leaders = leaders
        self.u = ident

    def receive(msg=M, from_=sender):
        super().handle_msg(*M)

    # to is always a identifier string (not a process)
    def send(m, to):
        super().send((to, m), executor)

